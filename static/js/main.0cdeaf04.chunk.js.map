{"version":3,"sources":["components/ItemSection/ItemSection.js","common/Label/Label.js","common/Toggle/Toggle.js","common/Text/Text.js","common/Option/Option.js","common/Button/Button.js","collection/ActionButtons/ActionButtons.js","components/ItemHeader/ItemHeader.js","components/ItemContainer/ItemContainer.js","components/ItemBody/ItemBody.js","ItemEditor.js","store/Store.js","serviceWorker.js","index.js","constants/Constants.js","mock/Mock.js"],"names":["ItemSection","React","memo","props","className","items","map","item","index","id","onClick","openItem","selectedIndex","key","name","Label","value","htmlFor","Toggle","onChange","type","checked","Text","Option","options","option","optionValue","optionName","Button","settings","other","ActionButtons","primary","secondary","ItemHeader","store","itemStore","getStore","undoRedoButtonSettings","e","onUndo","disabled","historyItems","undo","icon","onRedo","saveCancelButtonSettings","onSave","style","backgroundColor","onCancel","ItemContainer","fields","fieldType","fieldValue","fieldName","fieldOptions","ItemBody","title","ItemEditor","useState","initialitems","history","setStore","itemId","target","findIndex","tempStore","JSON","parse","stringify","onUndoRedo","flag","this","alert","currentItems","selectedId","selectedValue","parseInt","selectedStoreIndex","selectedStateIndex","ItemStore","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0cdeaf04.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./ItemSection.css\";\r\n\r\nexport const ItemSection = React.memo((props) => {\r\n  return (\r\n    <div className=\"itemInnerSection\">\r\n      <ul>\r\n        {props.items.map((item, index) => (\r\n          <li\r\n            id={item.id}\r\n            onClick={props.openItem}\r\n            className={\r\n              item.id === props.items[props.selectedIndex].id ? \"selected\" : \"\"\r\n            }\r\n            key={index}\r\n          >\r\n            {item.name}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n});\r\n\r\nItemSection.propTypes = {\r\n  items: PropTypes.array,\r\n  openItem: PropTypes.func,\r\n};\r\n","/**\r\n * Common Label Component\r\n */\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Label.css\";\r\n\r\nexport const Label = React.memo((props) => {\r\n  const { value, id } = props;\r\n  return (\r\n    <label className=\"label\" htmlFor={id}>\r\n      {value}\r\n    </label>\r\n  );\r\n});\r\n\r\nLabel.propTypes = {\r\n  value: PropTypes.string,\r\n  id: PropTypes.string,\r\n};\r\n","/**\r\n * Common toggle component\r\n */\r\n\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Toggle.css\";\r\n\r\nexport const Toggle = React.memo((props) => {\r\n  const { value, id, onChange } = props;\r\n  return <input type=\"checkbox\" checked={!!value} id={id} onChange={onChange} className={\"toggle\"}/>;\r\n});\r\n\r\nToggle.propTypes = {\r\n  value: PropTypes.bool,\r\n  id: PropTypes.string,\r\n  onChange: PropTypes.func,\r\n};\r\n","/**\r\n * Common textbox component\r\n */\r\n\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Text.css\";\r\n\r\nexport const Text = React.memo((props) => {\r\n  const { value, id, onChange } = props;\r\n  return (\r\n    <input type=\"text\" value={value} id={id} onChange={onChange}/>\r\n  );\r\n});\r\n\r\nText.propTypes = {\r\n  value: PropTypes.string,\r\n  id: PropTypes.string,\r\n  onChange: PropTypes.func,\r\n};\r\n","/**\r\n * Common Selectbox component\r\n */\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Option.css\";\r\n\r\nexport const Option = React.memo((props) => {\r\n  const { value, options, id, onChange } = props;\r\n  return (\r\n    <select className=\"option\" value={value} id={id} onChange={onChange}>\r\n      {options.map((option, index) => (\r\n        <option value={option.optionValue} key={index}> {option.optionName} </option>\r\n      ))}\r\n    </select>\r\n  );\r\n});\r\n\r\nOption.propTypes = {\r\n  value: PropTypes.number,\r\n  options: PropTypes.array,\r\n  id: PropTypes.string,\r\n  onChange: PropTypes.func,\r\n};\r\n","/**\r\n * Common Button component\r\n */\r\nimport React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport \"./Button.css\";\r\n\r\nexport const Button = React.memo((props) => {\r\n  const {value, ...other} = props.settings;  \r\n  return <button type=\"button\" className=\"button\" {...other}>\r\n      {value}\r\n    </button>;\r\n});\r\n\r\nButton.propTypes = {\r\n    settings: PropTypes.object,\r\n}\r\n","/**\r\n * Action buttons component is a collection of two buttons\r\n */\r\n\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Button } from \"../../common/Button\";\r\nimport \"./ActionButtons.css\";\r\n\r\nexport const ActionButtons = React.memo((props) => {\r\n  return (\r\n    <section className=\"ActionButtons\">\r\n      <Button settings={props.settings.primary} className=\"button\" />\r\n      <Button settings={props.settings.secondary} className=\"button\" />\r\n    </section>\r\n  );\r\n});\r\n\r\nActionButtons.propTypes = {\r\n  settings: PropTypes.object,\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { ActionButtons } from \"../../collection/ActionButtons\";\r\nimport \"./ItemHeader.css\";\r\n\r\nexport const ItemHeader = React.memo((props) => {\r\n  const store = props.itemStore.getStore();\r\n  const undoRedoButtonSettings = {\r\n    primary: {\r\n      value: \"Undo\",\r\n      onClick: function(e){\r\n        props.itemStore.onUndo();\r\n      },\r\n      disabled: store.historyItems.undo,\r\n      icon: 'undo',\r\n    },\r\n    secondary: {\r\n      value: \"Redo\",\r\n      onClick: function(){\r\n        props.itemStore.onRedo();\r\n      },      \r\n      disabled: !store.historyItems.undo,\r\n      icon: 'redo',\r\n    },\r\n  };\r\n  const saveCancelButtonSettings = {\r\n      primary: {\r\n        value:\"Save\",\r\n        onClick: function(){\r\n          props.itemStore.onSave();\r\n        },\r\n        icon: 'save',\r\n        style: {backgroundColor: 'green'}\r\n      },\r\n      secondary: {\r\n        value: \"Cancel\",\r\n        onClick: function(){\r\n          props.itemStore.onCancel();\r\n        },\r\n        icon: 'clear',\r\n        style: {backgroundColor: 'red'}\r\n      },\r\n  }\r\n\r\n  return (\r\n    <header className=\"itemHeader\">\r\n      <section className=\"buttonsContainer\">\r\n        <ActionButtons settings={undoRedoButtonSettings} />\r\n        <ActionButtons settings={saveCancelButtonSettings} />\r\n      </section>\r\n    </header>\r\n  );\r\n});\r\n\r\nItemHeader.propTypes = {\r\n    onSave: PropTypes.func,\r\n    title: PropTypes.string,\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Label } from \"../../common/Label\";\r\nimport { Toggle } from \"../../common/Toggle\";\r\nimport { Text } from \"../../common/Text\";\r\nimport { Option } from \"../../common/Option\";\r\nimport { ItemHeader } from \"../ItemHeader\";\r\nimport \"./ItemContainer.css\";\r\n\r\nexport const ItemContainer = React.memo((props) => {\r\n  const fields = props.item.fields || [];\r\n\r\n  return (\r\n    <div className=\"itemInnerContainer\">\r\n      <div>\r\n        <ItemHeader itemStore={props.itemStore} />\r\n      </div>\r\n      <div className=\"itemInnerContent\">\r\n        {fields.map((item, index) =>\r\n          item.fieldType === \"toggle\" ? (\r\n            <div className=\"itemContent\" key={index}>\r\n              <Toggle\r\n                value={item.fieldValue}\r\n                id={item.id}\r\n                onChange={props.onChange}\r\n              />\r\n              <Label value={item.fieldName} id={item.id} />\r\n            </div>\r\n          ) : item.fieldType === \"text\" ? (\r\n            <div className=\"itemContent\" key={index}>\r\n              <div>\r\n                <Label value={item.fieldName} id={item.id} />\r\n              </div>\r\n              <div>\r\n                <Text\r\n                  value={item.fieldValue}\r\n                  id={item.id}\r\n                  onChange={props.onChange}\r\n                />\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            <div className=\"itemContent\" key={index}>\r\n              <div>\r\n                <Label value={item.fieldName} id={item.id} />\r\n              </div>\r\n              <div>\r\n                <Option\r\n                  value={item.fieldValue}\r\n                  options={item.fieldOptions}\r\n                  id={item.id}\r\n                  onChange={props.onChange}\r\n                />\r\n              </div>\r\n            </div>\r\n          )\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n\r\nItemContainer.propTypes = {\r\n  item: PropTypes.object,\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { ItemSection } from \"../ItemSection\";\r\nimport { ItemContainer } from \"../ItemContainer\";\r\nimport \"./ItemBody.css\";\r\n\r\nexport const ItemBody = React.memo((props) => {\r\n  const store = props.itemStore.getStore();\r\n\r\n  return (\r\n    <>\r\n      <div className=\"itemBody\">\r\n        <nav className=\"itemSection\">\r\n          <h2>{props.title}</h2>\r\n          <ItemSection\r\n            items={store.items}\r\n            selectedIndex={store.selectedIndex}\r\n            openItem={props.itemStore.openItem}\r\n          />\r\n        </nav>\r\n        <section className=\"itemContainer\">\r\n          <ItemContainer\r\n            item={store.items[store.selectedIndex]}\r\n            onChange={props.itemStore.onChange}\r\n            itemStore={props.itemStore}\r\n          />\r\n        </section>\r\n      </div>\r\n    </>\r\n  );\r\n});\r\n\r\nItemBody.propTypes = {\r\n  itemStore: PropTypes.object,\r\n  title: PropTypes.string,\r\n};\r\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { ItemBody } from \"./components/ItemBody\";\nimport { ItemStore } from \"./store\";\nimport \"./ItemEditor.css\";\n\nexport const ItemEditor = React.memo((props) => {\n  const itemStore = ItemStore(props.items);\n\n  return (\n    <div className=\"itemEditor\">\n      <ItemBody itemStore={itemStore} title={props.title}/>\n    </div>\n  );\n});\n\nItemEditor.propTypes = {\n  items: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      name: PropTypes.string,\n      fields: PropTypes.arrayOf(\n        PropTypes.shape({\n          id: PropTypes.string,\n          fieldName: PropTypes.string,\n          fieldType: PropTypes.oneOf([\"text\", \"option\", \"toggle\"]),\n          fieldValue: PropTypes.oneOfType([\n            PropTypes.string,\n            PropTypes.number,\n            PropTypes.bool,\n          ]),\n          fieldOptions: PropTypes.arrayOf(\n            PropTypes.shape({\n              optionName: PropTypes.string,\n              optionValue: PropTypes.number,\n            })\n          ),\n        })\n      ),\n    })\n  ),\n  onSave: PropTypes.func, // one parameter: \"items\", as described above\n  title: PropTypes.string,\n};\n","import { useState } from \"react\";\r\n\r\nexport const ItemStore = (items) => {\r\n  const [store, setStore] = useState({\r\n    items: items, //items store for storing the full application details\r\n    selectedIndex: 0, //to store which tab is selected\r\n    historyItems: { //History to store history related items\r\n      initialitems: items,\r\n      undo: false,\r\n      history: 0,\r\n    },\r\n  });\r\n\r\n  return {\r\n    getStore: function () {\r\n      return store;\r\n    },\r\n    openItem: function (e) {\r\n      const itemId = e.target.id;\r\n      const selectedIndex = store.items.findIndex((item) => item.id === itemId);\r\n      const tempStore = JSON.parse(JSON.stringify(store));\r\n\r\n      tempStore.historyItems.history = store.selectedIndex;\r\n      tempStore.selectedIndex = selectedIndex;\r\n      setStore(tempStore);\r\n    },\r\n    onUndoRedo: function (tempStore, flag) {\r\n      if (typeof tempStore.historyItems.history === \"number\") {\r\n        tempStore.selectedIndex = store.historyItems.history;\r\n        tempStore.historyItems.history = store.selectedIndex;\r\n      } else {\r\n        tempStore.items = store.historyItems.history;\r\n        tempStore.historyItems.history = store.items;\r\n      }\r\n      tempStore.historyItems.undo = flag;\r\n\r\n      setStore(tempStore);\r\n    },\r\n    onUndo: function () {\r\n      const tempStore = JSON.parse(JSON.stringify(store));\r\n\r\n      if (!tempStore.historyItems.undo) {\r\n        this.onUndoRedo(tempStore, true);\r\n      }\r\n    },\r\n    onRedo: function () {\r\n      const tempStore = JSON.parse(JSON.stringify(store));\r\n\r\n      if (tempStore.historyItems.undo) {\r\n        this.onUndoRedo(tempStore, false);\r\n      }\r\n    },\r\n    onSave: function (e) {\r\n      alert(JSON.stringify(store.items));\r\n    },\r\n    onCancel: function () {\r\n      const tempStore = JSON.parse(JSON.stringify(store));\r\n\r\n      tempStore.items = store.historyItems.initialitems;\r\n      tempStore.selectedIndex = 0;\r\n      tempStore.historyItems.history = 0;\r\n      tempStore.historyItems.undo = false;\r\n      setStore(tempStore);\r\n    },\r\n    onChange: function (e) {\r\n      let tempStore = JSON.parse(JSON.stringify(store));\r\n      const currentItems = store.items;\r\n      const selectedId = e.target.id;\r\n      const type = e.target.type;\r\n      const selectedValue =\r\n        type === \"checkbox\"\r\n          ? e.target.checked\r\n          : type === \"select-one\"\r\n          ? parseInt(e.target.value, 10)\r\n          : e.target.value;\r\n      const selectedStoreIndex = tempStore.selectedIndex;\r\n      const selectedStateIndex = tempStore.items[\r\n        selectedStoreIndex\r\n      ].fields.findIndex((item) => item.id === selectedId);\r\n\r\n      tempStore.historyItems.history = currentItems;\r\n      tempStore.items[selectedStoreIndex].fields[\r\n        selectedStateIndex\r\n      ].fieldValue = selectedValue;\r\n      setStore(tempStore);\r\n    },\r\n  };\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { ItemEditor } from \"./ItemEditor\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Title } from \"./constants\";\nimport { Mock } from \"./mock/Mock\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <ItemEditor title={Title} items={Mock}/>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","/**\r\n * File for storing all the constants\r\n */\r\nexport const Title = \"Item Editor\";","export const Mock = [\r\n  {\r\n    id: \"1\",\r\n    name: \"ABC\",\r\n    fields: [\r\n      {\r\n        id: \"abcField1\",\r\n        fieldName: \"Field 1 ABC\",\r\n        fieldType: \"text\",\r\n        fieldValue: \"\",\r\n      },\r\n      {\r\n        id: \"abcField2\",\r\n        fieldName: \"Field 2  ABC\",\r\n        fieldType: \"text\",\r\n        fieldValue: \"\",\r\n      },\r\n      {\r\n        id: \"abcField3\",\r\n        fieldName: \"Field 3  ABC\",\r\n        fieldType: \"toggle\",\r\n        fieldValue: true,\r\n      },\r\n      {\r\n        id: \"abcField4\",\r\n        fieldName: \"Field 4  ABC\",\r\n        fieldType: \"option\",\r\n        fieldValue: 1,\r\n        fieldOptions: [\r\n          {\r\n            optionName: \"option 1\",\r\n            optionValue: 1,\r\n          },\r\n          {\r\n            optionName: \"option 2\",\r\n            optionValue: 2,\r\n          },\r\n          {\r\n            optionName: \"option 3\",\r\n            optionValue: 3,\r\n          },\r\n        ],\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    id: \"2\",\r\n    name: \"DEF\",\r\n    fields: [\r\n      {\r\n        id: \"defField1\",\r\n        fieldName: \"Field 1 DEF\",\r\n        fieldType: \"text\",\r\n        fieldValue: \"\",\r\n      },\r\n      {\r\n        id: \"defField2\",\r\n        fieldName: \"Field 2 DEF\",\r\n        fieldType: \"text\",\r\n        fieldValue: \"\",\r\n      },\r\n      {\r\n        id: \"defField3\",\r\n        fieldName: \"Field 3 DEF\",\r\n        fieldType: \"toggle\",\r\n        fieldValue: true,\r\n      },\r\n      {\r\n        id: \"defField4\",\r\n        fieldName: \"Field 4 DEF\",\r\n        fieldType: \"option\",\r\n        fieldValue: 1,\r\n        fieldOptions: [\r\n          {\r\n            optionName: \"option 1\",\r\n            optionValue: 1,\r\n          },\r\n          {\r\n            optionName: \"option 2\",\r\n            optionValue: 2,\r\n          },\r\n          {\r\n            optionName: \"option 3\",\r\n            optionValue: 3,\r\n          },\r\n        ],\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    id: \"3\",\r\n    name: \"GHI\",\r\n    fields: [\r\n      {\r\n        id: \"ghiField1\",\r\n        fieldName: \"Field 1 GHI\",\r\n        fieldType: \"text\",\r\n        fieldValue: \"\",\r\n      },\r\n      {\r\n        id: \"ghiField2\",\r\n        fieldName: \"Field 2 GHI\",\r\n        fieldType: \"text\",\r\n        fieldValue: \"\",\r\n      },\r\n      {\r\n        id: \"ghiField3\",\r\n        fieldName: \"Field 3 GHI\",\r\n        fieldType: \"toggle\",\r\n        fieldValue: true,\r\n      },\r\n      {\r\n        id: \"ghiField4\",\r\n        fieldName: \"Field 4 GHI\",\r\n        fieldType: \"option\",\r\n        fieldValue: 1,\r\n        fieldOptions: [\r\n          {\r\n            optionName: \"option 1\",\r\n            optionValue: 1,\r\n          },\r\n          {\r\n            optionName: \"option 2\",\r\n            optionValue: 2,\r\n          },\r\n          {\r\n            optionName: \"option 3\",\r\n            optionValue: 3,\r\n          },\r\n        ],\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    id: \"4\",\r\n    name: \"JKL\",\r\n    fields: [\r\n      {\r\n        id: \"jklField1\",\r\n        fieldName: \"Field 1 JKL\",\r\n        fieldType: \"text\",\r\n        fieldValue: \"\",\r\n      },\r\n      {\r\n        id: \"jklField2\",\r\n        fieldName: \"Field 2 JKL\",\r\n        fieldType: \"text\",\r\n        fieldValue: \"\",\r\n      },\r\n      {\r\n        id: \"jklField3\",\r\n        fieldName: \"Field 3 JKL\",\r\n        fieldType: \"toggle\",\r\n        fieldValue: true,\r\n      },\r\n      {\r\n        id: \"jklField4\",\r\n        fieldName: \"Field 4 JKL\",\r\n        fieldType: \"option\",\r\n        fieldValue: 1,\r\n        fieldOptions: [\r\n          {\r\n            optionName: \"option 1\",\r\n            optionValue: 1,\r\n          },\r\n          {\r\n            optionName: \"option 2\",\r\n            optionValue: 2,\r\n          },\r\n          {\r\n            optionName: \"option 3\",\r\n            optionValue: 3,\r\n          },\r\n        ],\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    id: \"5\",\r\n    name: \"MNO\",\r\n    fields: [\r\n      {\r\n        id: \"mnoField1\",\r\n        fieldName: \"Field 1 MNO\",\r\n        fieldType: \"text\",\r\n        fieldValue: \"\",\r\n      },\r\n      {\r\n        id: \"mnoField2\",\r\n        fieldName: \"Field 2 MNO\",\r\n        fieldType: \"text\",\r\n        fieldValue: \"\",\r\n      },\r\n      {\r\n        id: \"mnoField3\",\r\n        fieldName: \"Field 3 MNO\",\r\n        fieldType: \"toggle\",\r\n        fieldValue: true,\r\n      },\r\n      {\r\n        id: \"mnoField4\",\r\n        fieldName: \"Field 4 MNO\",\r\n        fieldType: \"option\",\r\n        fieldValue: 1,\r\n        fieldOptions: [\r\n          {\r\n            optionName: \"option 1\",\r\n            optionValue: 1,\r\n          },\r\n          {\r\n            optionName: \"option 2\",\r\n            optionValue: 2,\r\n          },\r\n          {\r\n            optionName: \"option 3\",\r\n            optionValue: 3,\r\n          },\r\n        ],\r\n      },\r\n    ],\r\n  },\r\n];\r\n"],"sourceRoot":""}